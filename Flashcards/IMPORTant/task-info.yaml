type: edu
custom_name: stage7
files:
- name: test/common/DialogClue.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase


    // ---- DialogClue ----

    /** May be several lines or just one. */
    interface Phrase {
        fun toPhraseLines(): List<PhraseLine>
    }

    /** list of input and output lines, combined together. */
    fun compositePhrase(block: () -> List<Phrase>) = object : Phrase {
        override fun toPhraseLines() = block().flatMap { it.toPhraseLines() }
    }

    fun compositePhrase(vararg phrases: Phrase) = object : Phrase {
        override fun toPhraseLines() = phrases.flatMap { it.toPhraseLines() }
    }

    /** Either user (input) or output phrase. Each phrase should be a line. */
    sealed class PhraseLine : Phrase {
        override fun toPhraseLines() = listOf(this)
    }

    /** Some mutable data, that is passed across dialog phrases. */
    class Context {
        val rawData = mutableMapOf<String, Any>()
    }

    class UserLine(val text: String, val updateContext: CtxUpdate = {}) : PhraseLine() {

    }
    typealias CtxUpdate = (ctx: Context) -> Unit

    class OutputLine(val checker: (text: String, ctx: Context) -> CheckResult) : PhraseLine()

    /** This function creates a line with user input (our test input).
     *
     * Unfortunately we can't access the Context, when we adding user text.
     * This occurs because of HS test framework limitations:
     * we need to pass all inputs first, and then start checking outputs. */
    fun user(text: String, updateContext: (ctx: Context) -> Unit = {}) = UserLine(text, updateContext)

    fun anyLine(updateContext: CtxUpdate = {}) = OutputLine { _, ctx -> CheckResult.TRUE.also { updateContext(ctx) } }

    fun containing(
            vararg parts: String,
            ignoreCase: Boolean = true,
            hint: String? = null,
            updateContext: CtxUpdate = {}
    ) = OutputLine { line, context ->
        fun buildFeedback(): String {
            val feedback = StringBuilder()
            feedback.append("Your line\n`$line`\nshould contain ${parts.joinToString("`, `", "`", "`")}")
            if (ignoreCase) {
                feedback.append(" (ignoring case)")
            }
            feedback.append(".")
            if (hint != null) {
                feedback.append("\n$hint")
            }
            return feedback.toString()
        }

        var startIndex = 0
        for (part in parts) {
            startIndex = line.indexOf(part, startIndex, ignoreCase)
            if (startIndex == -1) {
                return@OutputLine CheckResult.FALSE(buildFeedback())
            }
        }
        updateContext(context) // everything is correct, update context
        CheckResult.TRUE
    }

    class DialogClue(private val phrases: List<PhraseLine>) {

        private val inputPhrases = phrases.filter { it is UserLine }.map { it as UserLine }
        private val outputPhrases = phrases.filter { it is OutputLine }.map { it as OutputLine }

        fun generateInput() = inputPhrases
                .joinToString("\n", postfix = "\n") { it.text }

        fun checkOutput(output: String): CheckResult {
            val lines = output.lines()
                    .filter { it.isNotBlank() }

            fun wrongOutputSizeFeedback() = CheckResult.FALSE("The number of lines in your output is ${lines.size}, " +
                    "but it should be ${outputPhrases.size}. " +
                    "Check, that you output your lines with println, not print. And there are no extra outputs.\n\n" +
                    mergeInputAndOutput(lines))

    // here we store some mutable data from phrase to phrase
            val context = Context()

            val lineIter = lines.listIterator()
            phrases.forEach { phraseLine ->
                when (phraseLine) {
                    is UserLine -> phraseLine.updateContext(context)
                    is OutputLine -> {
                        if (!lineIter.hasNext()) {
                            return wrongOutputSizeFeedback()
                        }


                        val result = phraseLine.checker(lineIter.next(), context)
                        if (result != CheckResult.TRUE) {
                            // add the test start to output:
                            val trimmedLines = lines.take(lineIter.nextIndex())
                            return CheckResult.FALSE("${result.feedback}\n\n" +
                                    mergeInputAndOutput(trimmedLines))
                        }
                    }
                }
            }

            if (lineIter.hasNext()) {
                return wrongOutputSizeFeedback()
            }

            return CheckResult.TRUE
        }

        /** Merge program output lines, and test input lines. */
        private fun mergeInputAndOutput(outputLines: List<String>): String {
            val lineIter = outputLines.iterator()
            val sb = StringBuilder("Your output with test input (`>` indicates test input):\n")
            for (phrase in phrases) {
                if (!lineIter.hasNext()) {
                    break
                }
                when (phrase) {
                    is OutputLine -> {
                        sb.appendln(lineIter.next())
                    }
                    is UserLine -> {
                        sb.appendln("> ${phrase.text}")
                    }
                }
            }
    // add left output
            while (lineIter.hasNext()) {
                sb.appendln(lineIter.next())
            }
            return sb.toString()
        }
    }

    fun dialogTest(vararg phrases: Phrase, consoleArgs: Array<String> = emptyArray()): TestCase<DialogClue> {
        val dialogClue = DialogClue(phrases.flatMap { it.toPhraseLines() })
        return TestCase<DialogClue>()
                .setInput(dialogClue.generateInput())
                .setAttach(dialogClue)
                .addArguments(*consoleArgs)
    }
  learner_created: false
- name: test/common/FlashcardsStage7Test.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.stage.BaseStageTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import flashcards.Main
    import java.io.File


    abstract class FlashcardsStage7Test : BaseStageTest<DialogClue>(Main::class.java) {

        override fun generate(): List<TestCase<DialogClue>> {
            File("capitals.txt").delete()
            File("capitalsNew.txt").delete()
            val tests = mutableListOf<TestCase<DialogClue>>()

            val capitalList = mutableListOf<Pair<String, String>>()
            fun capitals() = capitalList.toTypedArray()

            // wrappers for add/remove card, but saving cards to capitalList:
            fun addCapital(card: String, def: String) = addCard(card, def)
                    .also { capitalList += card to def }

            fun removeCapital(card: String) = removeCard(card)
                    .also { capitalList.removeIf { it.first == card } }

            // clear files
            tests += dialogTest(
                    exportCards("capitals.txt", 0),
                    exportCards("capitalsNew.txt", 0),
                    exit()
            )
            tests += dialogTest(
                    addCapital("France", "Paris"),
                    addCapital("Russia", "Moscow"),
                    askCards("France", "??", ""),
                    exit(),
                    exportArg(2),
                    consoleArgs = arrayOf("-export", "capitals.txt")
            )
            tests += dialogTest(
                    importArg(2, *capitals()),
                    addCapital("Japan", "Tokyo"),
                    askCards("Moscow", "Paris", "Tokyo"),
                    exit(),
                    exportArg(3),
                    consoleArgs = arrayOf("-import", "capitals.txt", "-export", "capitalsNew.txt")
            )
            tests += dialogTest(
                    importArg(3, *capitals()),
                    askCards("Moscow", "Paris", "Tokyo"),
                    removeCapital("Japan"),
                    exit(),
                    exportArg(2),
                    consoleArgs = arrayOf("-export", "capitals.txt", "-import", "capitalsNew.txt")
            )
            tests += dialogTest(
                    importArg(2, *capitals()),
                    exit(),
                    consoleArgs = arrayOf("-import", "capitals.txt")
            )

            return tests
        }

        override fun check(reply: String, clue: DialogClue): CheckResult {
            return clue.checkOutput(reply)
        }


        // ------ extensions for building a dialog: ------

        fun importArg(count: Int, vararg cards: Pair<String, String>) =
                containing("$count cards have been loaded",
                        updateContext = { ctx ->
                            cards.forEach { (card, def) ->
                                ctx.addCard(card, def)
                                ctx.wrongCards.removeAll(listOf(card))
                            }
                        })

        fun exportArg(count: Int) = containing("$count cards have been saved")


        fun inputAction(action: String) = compositePhrase {
            listOf(containing("action", hint = "This line should ask the action."), user(action))
        }

        inner class LogPhrase(val fileName: String) : Phrase {
            override fun toPhraseLines() = compositePhrase(
                    inputAction("log"),
                    anyLine(),
                    user(fileName),
                    OutputLine { text, ctx ->
                        val result = containing("saved", hint = "This line should indicate, that the log has been saved.").checker(text, ctx)
                        if (!result.isCorrect) {
                            return@OutputLine result
                        }
                        if (!File(fileName).exists()) {
                            return@OutputLine CheckResult.FALSE("The log file $fileName does not exist.")
                        }
                        CheckResult.TRUE
                    }
            ).toPhraseLines()
        }

        private fun log(fileName: String) = LogPhrase(fileName)

        private fun resetStats() = compositePhrase(
                inputAction("reset stats"), containing("reset", hint = "This line should confirm card statistics reset.",
                updateContext = { ctx -> ctx.wrongCards.clear() })
        )

        /** Between tests we cache wrong answered capitals to check hardest cards, when we restore them from file. */
        private val wrongAnweredCapitals: MutableList<String> = mutableListOf()

        /** [customWrongCards] are used to load saved wrong cards from the previous test. */
        fun hardestCards(customWrongCards: List<String>? = null) = compositePhrase(
                inputAction("hardest card"),
                OutputLine { text, ctx ->
                    if (customWrongCards != null) {
                        ctx.wrongCards.clear()
                        ctx.wrongCards.addAll(customWrongCards)
                    }
                    val groupedCards = ctx.wrongCards
                            .groupBy { it }.mapValues { (_, v) -> v.size }
                    val maxMistakes = groupedCards.values.max() ?: 0
                    val hardestCards = groupedCards.filterValues { it == maxMistakes }.keys.toList()

                    when (hardestCards.size) {
                        0 -> return@OutputLine containing("There are no cards with errors").checker(text, ctx)
                        1 -> return@OutputLine containing("The hardest card is \"${hardestCards[0]}\"",
                                "$maxMistakes").checker(text, ctx)
                        else -> {
                            hardestCards.forEach { card ->
                                if (card !in text) {
                                    return@OutputLine CheckResult.FALSE("Your line `$text`\n" +
                                            "should contain the hardest cards " +
                                            "${hardestCards.joinToString("\", \"", "\"", "\"")} with $maxMistakes mistakes.")
                                }
                            }
                            val numberOfHardestCards = text.count { it == '"' }
                            if (numberOfHardestCards != hardestCards.size * 2) {
                                return@OutputLine CheckResult.FALSE("Your line `$text`\n" +
                                        "contains more hardest cards, than expected. Expected: $hardestCards.")
                            }
                            if (maxMistakes.toString() !in text) {
                                if (numberOfHardestCards != hardestCards.size) {
                                    return@OutputLine CheckResult.FALSE("Your line `$text`\n" +
                                            "should contain $maxMistakes mistakes for your hardest cards.")
                                }
                            }
                        }
                    }
                    CheckResult.TRUE
                }
        )


        // extend dialog context with our own data:

        @Suppress("UNCHECKED_CAST")
        private val Context.cardToDef
            get() = rawData.getOrPut("cardToDef") { mutableMapOf<String, String>() } as MutableMap<String, String>

        @Suppress("UNCHECKED_CAST")
        /** All cards, that were answered wrong. */
        private val Context.wrongCards
            get() = rawData.getOrPut("wrongCards") { mutableListOf<String>() } as MutableList<String>


        @Suppress("UNCHECKED_CAST")
        private val Context.defToCard
            get() = rawData.getOrPut("defToCard") { mutableMapOf<String, String>() } as MutableMap<String, String>

        private fun Context.addCard(card: String, definition: String) {
            cardToDef[card] = definition
            defToCard[definition] = card
        }

        private fun Context.removeCard(card: String) {
            val def = cardToDef.remove(card)
            if (def != null) {
                defToCard.remove(def)
            }
        }


        private fun addCard(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("has been added",
                        hint = "This line should add the pair (\"$card\":\"$def\").",
                        updateContext = { ctx -> ctx.addCard(card, def) })
        )


        private fun existingDef(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("definition", "exists", hint = "This line should reject the existing definition `$def`.")
        )


        private fun existingCard(card: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                containing("card", "exists", hint = "This line should reject the existing card `$card`.")
        )

        private fun removeCard(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("has been removed", hint = "This line should remove the card `$card`.",
                        updateContext = { ctx -> ctx.removeCard(card) })
        )

        private fun removeNonExisting(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("Can't remove \"$card\"", hint = "This line should reject removing non existing card `$card`.")
        )


        private fun importCards(fileName: String, vararg cards: Pair<String, String>) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("${cards.size} cards have been loaded",
                        updateContext = { ctx ->
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            cards.forEach { (card, def) ->
                                if (card in cardToDef) {
                                    defToCard.remove(cardToDef[card]) // erase wrong reverse link
                                }
                                ctx.addCard(card, def) // with update!!
                            }
                        })
        )

        private fun importNonExisting(fileName: String) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("not found", hint = "This line should say, that the file $fileName does not exist.")
        )

        private fun exportCards(fileName: String, cardsSize: Int) = compositePhrase(
                inputAction("export"),
                anyLine(), user(fileName),
                containing("$cardsSize cards have been saved")
        )

        private fun exit() = compositePhrase(
                inputAction("exit"),
                anyLine()
        )

        /** Perform ask action. [ansDefs] are our test answers with definitions.
         * We don't know are they wrong or correct, because the test is random. */
        private fun askCards(vararg ansDefs: String, saveWrongAnsweredCapitals: Boolean = false) = compositePhrase {
            val startPhrases = listOf(
                    inputAction("ask"),
                    anyLine(), user(ansDefs.size.toString())
            )
            // here we add the dialog logic, by creating base OutputLine class with a custom checker
            // we use context to connect with neighbor checkers

            // iterate test answered definitions:
            val repeatingPhrases = ansDefs.map { ansDef ->
                compositePhrase(
                        OutputLine { text, ctx ->
                            val askedCard = text.dropWhile { it != '"' }.dropLastWhile { it != '"' }.trim('"')
                            if (askedCard.isEmpty()) {
                                return@OutputLine CheckResult.FALSE("Not found card in quotes. " +
                                        "This line should ask the definition of a random card.")
                            }
                            if (askedCard !in ctx.cardToDef) {
                                return@OutputLine CheckResult.FALSE("You asked the definition of the non existing card: `$askedCard`.")
                            }
                            ctx.rawData["lastAskedCard"] = askedCard
                            CheckResult.TRUE
                        },
                        // unfortunately we can't access the Context in user action, see documentation of user()
                        user(ansDef),
                        // check the answer:
                        OutputLine { text, ctx ->
                            val askedCard = ctx.rawData["lastAskedCard"]?.toString()
                                    ?: throw IllegalStateException("Not found lastAskedCard in the `ask` checker.")
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            val rightAns = cardToDef[askedCard]

                            val hint = "The asked card was `$askedCard`, the answer was `$ansDef`."
                            if (cardToDef[askedCard] == ansDef)
                                containing("Correct answer", hint = hint).checker(text, ctx)
                            else {
                                ctx.wrongCards += askedCard

                                val isDefFor = defToCard[ansDef]
                                if (isDefFor != null) {
                                    containing("Wrong answer", "The correct one is \"$rightAns\"",
                                            "you've just written the definition of \"$isDefFor\"", hint = hint).checker(text, ctx)
                                } else {
                                    // should not contain definition hint!!
                                    if (text.contains("you've just written the definition of")) {
                                        CheckResult.FALSE("Your line\n`$text`\nshould NOT contain " +
                                                "`you've just written the definition of`.\n$hint")
                                    } else {
                                        containing("Wrong answer", "The correct one is \"$rightAns\"", hint = hint).checker(text, ctx)
                                    }

                                }
                            }.also {
                                // only for these tests. To test restoring wrong capitals from file.
                                if (saveWrongAnsweredCapitals) {
                                    wrongAnweredCapitals.clear()
                                    wrongAnweredCapitals.addAll(ctx.wrongCards)
                                }
                            }
                        }
                )
            }
            (startPhrases + repeatingPhrases)
        }
    }
  learner_created: false
- name: test/FlashcardsTest.java
  visible: false
  text: |
    import common.FlashcardsStage7Test;

    public class FlashcardsTest extends FlashcardsStage7Test {
        // just empty class, but not abstract so it can be run
    }
  learner_created: false
- name: src/flashcards/Main.java
  visible: true
  text: |
    package flashcards;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.PrintWriter;
    import java.util.*;

    public class Main {
        static ArrayList<String> log = new ArrayList<>();
        static Scanner scanner = new Scanner(System.in);
        static TreeMap <String, String> flashcards = new TreeMap<>();
        static TreeMap <String, String> reverseFlashcards = new TreeMap<>();
        static TreeMap <String, Integer> hardestCard = new TreeMap<>();

        public static void main(String[] args) {
            printMenu();
        }

        static public void printMenu(){
            String menuInstruction = "Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):";
            System.out.println(menuInstruction);
            log.add(menuInstruction);
            String userInput = scanner.nextLine();
            log.add(userInput);

            switch (userInput){
                case "add":
                    addCard();
                    break;
                case "remove":
                    removeCard();
                    break;
                case "import":
                    importCards();
                    break;
                case "export":
                    exportCards();
                    break;
                case "ask":
                    askCards();
                    break;
                case "exit":
                    String exitInstruction1 = "Bye bye!";
                    System.out.println(exitInstruction1);
                    break;
                case "log":
                    generateLog();
                    break;
                case "hardest card":
                    hardestCard();
                    break;
                case "reset stats":
                    resetCard();
                    break;
                default:
                    break;
            }
        }

        //Method to add a new card into flashcard map
        static public void addCard(){
            String addInstruction1 = "The card:";
            System.out.println(addInstruction1);
            log.add(addInstruction1);
            String card = scanner.nextLine();
            log.add(card);
            if (flashcards.containsKey(card)){
                String addInstruction2 = "The card \"" + card + "\" already exists.";
                System.out.println(addInstruction2);
                log.add(addInstruction2);
            } else {
                String addInstruction3 = "The definition of the card:";
                System.out.println(addInstruction3);
                log.add(addInstruction3);
                String definition = scanner.nextLine();
                log.add(definition);
                if (flashcards.containsValue(definition)) {
                    String addInstruction4 = "The definition \"" + definition + "\" already exists.";
                    System.out.println(addInstruction4);
                } else {
                    flashcards.put(card, definition);
                    reverseFlashcards.put(definition, card);
                    hardestCard.put(card, 0);
                    String addInstruction5 = String.format("The pair (\"%s\":\"%s\") has been added.\n", card, definition);
                    System.out.printf(addInstruction5);
                    log.add(addInstruction5);
                }
            }
            printMenu();
        }

        //Method to remove a card from the flashcard map
        static public void removeCard(){
            String removeInstruction1 = "The card:";
            System.out.println(removeInstruction1);
            log.add(removeInstruction1);
            String cardToRemove = scanner.nextLine();
            log.add(cardToRemove);
            if (flashcards.containsKey(cardToRemove)){
                reverseFlashcards.remove(flashcards.get(cardToRemove));
                flashcards.remove(cardToRemove);
                hardestCard.remove(cardToRemove);
                String removeInstructio2 = "The card has been removed.";
                System.out.println(removeInstructio2);
                log.add(removeInstructio2);
            } else {
                String removeInstruction3 = "Can't remove \"" + cardToRemove + "\": there is no such card.";
                System.out.println(removeInstruction3);
                log.add(removeInstruction3);
            }
            printMenu();
        }

        //Method to import cards from a file.
        static public void importCards(){
            String importInstruction1 = "File name:";
            System.out.println(importInstruction1);
            log.add(importInstruction1);
            String fileName = scanner.nextLine();
            log.add(fileName);
            File file = new File("./" + fileName);
            String card;
            String definition;
            int error;
            int count = 0;
            try (Scanner readScanner = new Scanner(file)){
                while (readScanner.hasNext()){
                    card = readScanner.nextLine();
                    definition = readScanner.nextLine();
                    error = Integer.parseInt(readScanner.nextLine());
                    count ++;
                    if (flashcards.containsKey(card)){
                        flashcards.replace(card, definition);
                        hardestCard.replace(card, error);
                    } else {
                        flashcards.put(card, definition);
                        hardestCard.put(card, error);
                    }
                }
                String importInstruction2 = count + " cards have been loaded.";
                System.out.println(importInstruction2);
                log.add(importInstruction2);
            } catch (FileNotFoundException e){
                String importInstruction3 = "File not found.";
                System.out.println(importInstruction3);
                log.add(importInstruction3);
            }
            printMenu();
        }
        //Method to export the flashcards.
        static public void exportCards(){
            String exportInstruction1 = "File name:";
            System.out.println(exportInstruction1);
            String filePath = scanner.nextLine();
            log.add(filePath);
            File file = new File("./" + filePath);
            int count = 0;
            try (PrintWriter printWriter = new PrintWriter(file)){
                for (Map.Entry<String, String> card: flashcards.entrySet()){
                    printWriter.println(card.getKey());
                    printWriter.println(card.getValue());
                    printWriter.println(hardestCard.get(card.getKey()));
                    count++;
                }
                String exportInstruction2 = count + " cards have been saved.";
                System.out.println(exportInstruction2);
                log.add(exportInstruction2);
            } catch (FileNotFoundException e){
                String exportInstruction3 = "Random";
                System.out.println(exportInstruction3);
            }
            printMenu();
        }
        //Method to ask cards.
        static public void askCards(){
            String askInstruction1 = "How many times to ask?";
            System.out.println(askInstruction1);
            log.add(askInstruction1);
            int timeToAsk = scanner.nextInt();
            log.add(String.valueOf(timeToAsk));
            scanner.nextLine();
            for (int i = 0; i < timeToAsk; i++){
                Random random = new Random();
                String randomKey = (String)flashcards.keySet().toArray()[random.nextInt(flashcards.size())];
                String askInstruction2 = "Print the definition of \"" + randomKey + "\":";
                System.out.println(askInstruction2);
                log.add(askInstruction2);
                String userInput = scanner.nextLine();
                log.add(userInput);
                if (flashcards.get(randomKey).equals(userInput)){
                    String askInstruction3 = "Correct answer.";
                    System.out.println(askInstruction3);
                    log.add(askInstruction3);
                } else if (flashcards.containsValue(userInput)){
                    String askInstruction4 = "Wrong answer. The correct one is \""
                            + flashcards.get(randomKey)
                            + "\", you've just written the definition of \""
                            + reverseFlashcards.get(userInput) + "\".";
                    System.out.println(askInstruction4);
                    log.add(askInstruction4);
                    hardestCard.replace(randomKey, (hardestCard.get(randomKey) + 1));
                } else {
                    String askInstruction5 = "Wrong answer. The correct one is \"" + flashcards.get(randomKey) + "\".";
                    System.out.println(askInstruction5);
                    hardestCard.replace(randomKey, (hardestCard.get(randomKey) + 1));
                }
            }
            printMenu();
        }
        //Method to generate a log file.
        static public void generateLog(){
            String generateInstruction1 = "File name:";
            System.out.println(generateInstruction1);
            log.add(generateInstruction1);
            String fileName = scanner.nextLine();
            log.add(fileName);
            File file = new File("./" + fileName);
            try (PrintWriter printwriter = new PrintWriter(file)){
                for (String entry: log){
                    printwriter.println(entry);
                }
                String generateInstruction2 = "The log has been saved.";
                System.out.println(generateInstruction2);
                log.add(generateInstruction2);
                printMenu();
            } catch (FileNotFoundException e){
                String generateInstruction3 = "file not found";
                System.out.println(generateInstruction3);
                log.add(generateInstruction3);
            }
        }
        //Show the hardest card.
        static int max = 0;
        static public void hardestCard(){
            max = 0;
            for (Map.Entry<String, Integer> entry : hardestCard.entrySet()){
                if (entry.getValue() > max){
                    max = entry.getValue();
                }
            }
            ArrayList<String> hardest = new ArrayList<>();

            if (max == 0){
                String hardestInstruction1 = "There are no cards with errors.";
                System.out.println(hardestInstruction1);
                log.add(hardestInstruction1);
            } else {
                for (Map.Entry<String, Integer> entry : hardestCard.entrySet()){
                    if (entry.getValue() == max){
                        hardest.add("\"" + entry.getKey() + "\"");
                    }
                }
                String hardestInstruction2 = "The hardest card is "
                        + String.join(",", hardest)
                        + ". You have " + max + " errors answering it.";
                System.out.println(hardestInstruction2);
                log.add(hardestInstruction2);
            }
            printMenu();
        }
        //Reset the hardest card count.
        static public void resetCard(){
            for (Map.Entry<String, Integer> entry : hardestCard.entrySet()){
                entry.setValue(0);
            }
            String resetInsturction1 = "Card statistics has been reset.";
            System.out.println(resetInsturction1);
            printMenu();
        }
    }
  learner_created: false
- name: capitals.txt
  visible: true
  text: |
    France
    Paris
    1
    Russia
    Moscow
    9
  learner_created: false
- name: testLog.txt
  visible: true
  text: |
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    There are no cards with errors.
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    add
    The card:
    France
    The definition of the card:
    Paris
    The pair ("France":"Paris") has been added.

    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "France":
    France
    Print the definition of "France":
    ??
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest card is "France". You have 2 errors answering it.
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    reset stats
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    There are no cards with errors.
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    add
    The card:
    Russia
    The definition of the card:
    Moscow
    The pair ("Russia":"Moscow") has been added.

    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "Russia":
    ??
    Print the definition of "Russia":
    ??
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest card is "Russia". You have 2 errors answering it.
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "Russia":
    ??
    Print the definition of "Russia":
    ??
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest card is "Russia". You have 4 errors answering it.
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "Russia":
    ??
    Print the definition of "Russia":
    ??
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest card is "Russia". You have 6 errors answering it.
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "Russia":
    ??
    Print the definition of "France":
    ??
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest card is "Russia". You have 7 errors answering it.
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "Russia":
    ??
    Print the definition of "Russia":
    ??
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest card is "Russia". You have 9 errors answering it.
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    export
    capitals.txt
    2 cards have been saved.
    Input the action(add, remove, import, export, ask, exit, log, hardest card, reset stats):
    log
    File name:
    testLog.txt
  learner_created: false
- name: capitalsNew.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/44/stages/238/implement
status: Solved
record: 6
